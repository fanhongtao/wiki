[{TableOfContents }]\\

!!!Editing in Vim
!!Typing
!Use keyword completion
vim has a very nice keyword completion system. This means that you can type part of a long word, press a key, and have vim finish the word for you. For instance, if you have a variable called iAmALongAndAwkwardVarName somewhere in your code, you probably don't want to type the whole thing in every time you use it.

To use keyword completion, just type the first few letters of the string (e.g. iAmAL) and press <C-N> (that means hold down Ctrl and type N) or <C-P>. If vim doesn't give you the word you want at first, keep trying -- vim will cycle through all completions it can find.

!Enter insert mode intelligently
Most users new to vim get into insert mode by typing i. This works, but it's often pretty inefficient, since vi has a host of commands that leave the editor in insert mode. Here are some of the more popular ones:

| i | Insert text to the left of the current character.
| I | Insert text at the beginning of the current line.
| a | Insert text to the right of the current character.
| A | Insert text at the end of the current line.
| o | Create a new line under the current one and insert text there.
| O | Create a new line above the current one and insert text there.
| c''{motion}'' | Delete (change) the text moved over by ''{motion}'' and insert text to replace it. For instance, c$ would delete the text from the cursor to the end of the line and enter insert mode. ct! would delete the text from the cursor up to (but not including) the next exclamation mark and enter insert mode. The deleted text is copied to the clipboard and can be pasted.
| d''{motion}'' | Delete the text moved over by ''{motion}'' -- same as c''{motion}'', but doesn't enter insert mode.

!! Moving blocks of text  
!Use visual selections and the appropriate selection mode
Unlike the original vi, vim allows you to highlight text and perform operations on it. There are three main visual selection modes (that is, text highlighting modes). These modes are as follows:

| v | Characterwise selection mode. This is the selection mode that most people are used to, so practice with it before trying the others.
| V | Linewise selection mode. Whole lines are always selected. This is better than characterwise mode when you want to copy or move a group of lines.
| <C-V> | Blockwise selection mode. Extremely powerful and available in very few other editors. You can select a rectangular block and any text inside that block will be highlighted.


All the usual cusor movement keys apply -- so, for instance, vwww would go into visual selection mode and highlight the next three words. Vjj would go into linewise visual selection mode and highlight the current line and the two lines below it.

! Cutting and copying from visual selections
Once you have a highlighted selection, you probably want to do something with it. Some of the more useful commands you can give when an area of text is highlighted:

| d | Cut (delete) the highlighted text and put it into the clipboard.
| y | Copy (or yank, which is vim-ese for "copy") the highlighted text into the clipboard.
| c | Cut the highlighted text into the clipboard. This is just like d, except it leaves the editor in insert mode.


! Cutting and copying from non-visual selections
If you know exactly what you want to copy or cut, you can do it without entering visual mode. This saves time.

| d''{motion}'' | Cut the text moved over by ''{motion}'' to the clipboard. For instance, dw would cut a word and dfS would cut from the cursor up to and including the next capital S on the current line of text.
| y''{motion}'' | Copy the text moved over by ''{motion}''.
| c''{motion}'' | Cut the text moved over by ''{motion}'' and leave the editor in insert mode.
| dd | Cut the current line.
| yy | Copy the current line.
| cc| Cut the current line and leave the editor in insert mode.
| D | Cut from the cursor to the end of the current line.
| Y | Yank the whole line, just like yy. (Yes, it's inconsistent! You can use y$ to do what you would expect Y to do.)
| C | Cut from the cursor to the end of the current line and leave the editor in insert mode.
| x | Cut the current character. (This is sort of like a command-mode backspace.)
| s | Cut the current character and leave the editor in insert mode.


!Pasting
Pasting is easy. Put the cursor where you want the pasted text and type p.

!Using multiple clipboards
Most editors have a single clipboard. vim has many more; clipboards in vim are called registers. You can list all the currently defined registers and their contents by typing :reg. Typically, you'll be using the lowercase letter registers; the others are used for various internal vim purposes and are only occasionally helpful.

To use a specific register for a copy or paste operation, simply type "a before the command for the operation, where a is the register you want to use.

For example, to copy the current line into register k, you could type "kyy. (You could also type V"ky. Why would that work?). That line would stay in register k until you specifically copied something else into register k. You would then use "kp to paste the text from register k.

!! Avoiding repetition

!The amazing . command
In vi, typing . (a period) will repeat the last command you gave. For instance, if your last command was dw (delete word), vi will delete another word.

!Using counts
Counts are one of the most powerful and time-saving features of vim. Any command can be preceded by a number. The number will tell vim how many times to execute the command. Here are a few examples:

3j will move the cursor down three lines.

10dd will delete ten lines.

y3f" will yank (copy) text from the cursor to the third quotation mark after the cursor on the current line. Counts are useful to extend the range of a motion in this manner.

! Recording macros
Occasionally, you'll find yourself doing the same thing over and over to blocks of text in your document. vim will let you record an ad-hoc macro to perform the operation.

| qregister | Start macro recording into the named register. For instance, qa starts recording and puts the macro into register a.
| q | End recording.
| @register | Replay the macro stored in the named register. For instance, @a replays the macro in register a.


Keep in mind that macros just record your keystrokes and play them back; they are not magic. Recording macros is almost an art form because there are so many commands that accomplish a given task in vim, and you must carefully select the commands you use while your macro is recording so that they will work in all the places you plan to execute the macro.
