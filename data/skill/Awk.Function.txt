[{TableOfContents }]

!!!内置函数
!! 1 算术函数
以下算术函数和C语言中的同名函数操作相同。
|| 函数原型 || 函数说明
| atan2(y, x) | 返回 y/x 的反正切
| cos(x) | 返回 x 的余弦，x是弧度
| exp(x) | 返回 x 的幂，e^x
| int(x) | 返回 x 的截断至整数的值
| log(x) | 返回 x 的自然对数
| rand() | 返回0 到1 之间任意数字 n， 其中 0 <= n < 1
| sin(x) | 返回 x 的正弦，x是弧度
| sqrt(x) | 返回 x 的平方根
| srand([[Expr]) | 将 rand 函数的种子值设置为Expr参数的值，如果省略Expr参数，则使用系统的当前时间。

!! 2 字符串处理函数
AWK内部提供了一系列处理字符串函数。
|| 函数原型 ||　函数说明
| gsub(ere, repl [[,　in]) | 和sub函数一样，只是会将 in 中所有匹配 ere 的子串都替换为 repl 
| index(s, t) | 返回s中字符串 t 第一次出现的位置，0表示字符串 s 中没有子串 t 。
| length[[(s)] | 返回s长度，如果没有参数，则返回 $0 的长度。
| match(s, ere) | 返回s中第一个匹配扩展正则表达式 ere 的子串的位置。0表示 s 中没有与 ere 匹配的子串。\\匹配成功后，特殊变量 RSTART 和 RLENGTH 被设置为匹配成功的子串的位置和长度。\\如果没有匹配成功，则设置为 -1 。
| split(s, a[[, fs]) | 以正则表达式 fs 为分隔符，将字符串 s 分隔成字符串数组 a[[1]、a[[2]、……、a[[n]中，并返回 n 的值。\\如果没有指定 fs，则使用特殊变量  FS 的值。
| sprintf(fmt, expr, ...) | 返回经fmt格式化后的expr的字符串
| sub(ere, repl [[, in]) | 将 in 中的第一个匹配扩展正则表达式 ere 的子串替换为 repl 所指定的串。如果 in 没有指定，则使用 $0 。
| substr(s, m [[, n]) | 返回s中，从 m 开始，最大长度为 n 的子串。\\如果没有指定n，则返回从m到字符串s结束的子串。\\如果 m+n的值大于 s 的长度，则也返回从m到字符串s结束的子串。
| tolower(s) | 将s中的字符转换成小写字母后返回。（不修改串s的值）
| toupper(s) | 将s中的字符转换成大写字母后返回。（不修改串s的值）

说明:
1、在AWK中，字符是从 1 开始计数的。所以，index("01234", "0")的返回结果为1。
{{{
>> awk 'BEGIN {print index("01234", "0")}' one.unl
1
}}}

2、可以直接将字符串值放在一起来实现字符串的连接（类似于C中的strcat函数）。如果想将多个字符串变量连接在一起，记得要使用括号将变量名括起来，这样AWK才能够知道变量的真实名字。如：
{{{
first_name = " Benjamin"
last_name  = " Frnaklin."
hello1 = "this is"first_name
hello2 = "this is"(first_name)(last_name)   # 一定要加括号！
}}}

3、在 AWK 中，没有显示的字符串和数字的转换。如果想要将某一个变量 abc 当做数字来进行比较，则应该先使用
{{{
abc = abc + 0
}}}
来显式地将其转换为数字。

注：在SUN下，如果分隔后的某一个字段中包括了 space，则想直接将其当成数字来和别的数字做比较，会不成功（AWK不会报错，但比较的结果不是想要的结果）。

!! 3 其它函数
AWK中的其它函数有：
|| 函数原型 || 函数说明
| close(Expression) | 用同一个带字符串值 的 Expression 参数来关闭由 print 或 printf 语句打开的或调用 getline 函数打开的文件或管道。如果文件或管道成功关闭，则返回0，其它情况，则返回非零值。如果打算写一个文件，并稍后在一个程序中读取该文件，则必须调用 close 。
| system(cmd) | 执行命令 cmd 并返回其退出状态。
| Expression ~| getline [[ Variable ] | 从来自 Expression 参数指定的命令的输出中通过管道传送的流中读取一个输入记录，并将该记录的值指定给 Variable 参数指定的变量。\\如果当前未打开将 Expression 参数的值作为其命令名称的流，则创建流。创建的流等同于调用 popen 子例程。此时 Command 参数取 Expression 参数的值且 Mode 参数设置为一个是 r 的值。\\只要流保留保留打开且 Expression 参数求得同一个字符串，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则$0记录变量和NF特殊变量设置为从流读取的记录。
| getline [[Variable] < Expression | 从Expression参数指定的文件读取输入的下一个记录，并将Variable参数指定的变量设置为该记录的值。只要流保持打开且Expression参数对同一字符串求值，则对getline函数的每次后续调用将读取另一个记录。如果未指定Variable参数，则$0记录变量和NF特殊变量设置为从流读取的记录。
| getline [[Variable] | 将Variable参数指定的变量设置为从当前输入文件读取的下一个输入记录。如果未指定Variable参数，则$0记录变量设置为该记录的值，还将设置NF、NR和FNR特殊变量。
注：所有getline函数的格式对于成功输入返回1，对于文件结束返回0，对于错误返回 -1 。
